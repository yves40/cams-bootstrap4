<?xml version="1.0" encoding="windows-1252" ?>
<!-- ******************************************************************************************************
    build.xml

    Feb 19 2020       Initial
    Feb 25 2020       Deployment on vboxnode, and tests
    Mar 01 2020       Deployment on zerasp, and tests
    Mar 02 2020       Reorg of deployment directories 

****************************************************************************************************** -->
<project name="assessment" default="help" basedir="." >
    <property file="build.properties"/>

    <target name="help" description="What's in this build file">
        <echo message="************************ @  Targets available "></echo>
        <echo message=""></echo>
        <echo message="************************ @  .......... camsvboxnode: cams on VBOX VM vboxnode"></echo>
        <echo message="************************ @  .......... camszerasp  : cams on Raspberry pi"></echo>
        <echo message=""></echo>
    </target>

    <!-- ===================================================================================== -->
    <!-- Hosts deployment-->
    <!-- ===================================================================================== -->
    <target name="camsvboxnode" depends="cleanup">
        <echo message="************************ @ deploy node cams to ${vboxnode.server}"></echo>
        <antcall target="nodekit">
            <param name="shellnode" value="vboxnode"/>
        </antcall>
        <!-- The application files -->
        <antcall target="serverupdate">
            <param name="remoteserver" value="${vboxnode.server}"/>
            <param name="localdir" value="${build.workdir}"/>
            <param name="localzip" value="cams-bootstrap4.zip"/>
            <param name="remotenetdir" value="${vboxnode.approot}/cams"/>
            <param name="remoteaccount" value="${vboxnode.nodeuser}"/>
            <param name="remoteaccountpass" value="${vboxnode.nodepassword}"/>
        </antcall>
        <!-- Manage the .bashrc file -->
        <sshexec command="mv ${vboxnode.approot}/cams/src/shell/vboxnode/node/.bashrc ~/.bashrc" host="${vboxnode.server}" username="${vboxnode.nodeuser}"
                 password="${vboxnode.nodepassword}"
                 trust="true" verbose="${zip.verbosemode}"/>
        <!-- chmod for shell script -->
        <sshexec command="chmod +x ${vboxnode.approot}/cams/src/shell/vboxnode/node/*.sh" host="${vboxnode.server}" username="${vboxnode.nodeuser}"
                 password="${vboxnode.nodepassword}"
                 trust="true" verbose="${zip.verbosemode}"/>
    </target>

    <!-- ===================================================================================== -->
    <!-- Hosts deployment-->
    <!-- ===================================================================================== -->
    <target name="camszerasp" depends="cleanup">
        <echo message="************************ @ deploy node cams to ${zerasp.server}"></echo>
        <antcall target="nodekit">
            <param name="shellnode" value="zerasp"/>
        </antcall>
        <!-- The application files -->
        <antcall target="serverupdate">
            <param name="remoteserver" value="${zerasp.server}"/>
            <param name="localdir" value="${build.workdir}"/>
            <param name="localzip" value="cams-bootstrap4.zip"/>
            <param name="remotenetdir" value="${zerasp.approot}/cams"/>
            <param name="remoteaccount" value="${zerasp.nodeuser}"/>
            <param name="remoteaccountpass" value="${zerasp.nodepassword}"/>
        </antcall>
        <!-- Manage the .bashrc file -->
        <sshexec command="mv ${zerasp.approot}/cams/src/shell/zerasp/node/.bashrc ~/.bashrc" host="${zerasp.server}" username="${zerasp.nodeuser}"
                 password="${zerasp.nodepassword}"
                 trust="true" verbose="${zip.verbosemode}"/>
        <!-- chmod for shell script -->
        <sshexec command="chmod +x ${zerasp.approot}/cams/src/shell/*.sh" host="${zerasp.server}" username="${zerasp.nodeuser}"
                 password="${zerasp.nodepassword}"
                 trust="true" verbose="${zip.verbosemode}"/>
    </target>

    <!-- ===================================================================================== -->
    <!-- node Vue web app kit building -->
    <!-- ===================================================================================== -->
    <target name="nodekit">
        <copy todir="${build.workdir}" verbose="${copy.verbosemode}">
            <fileset dir="${build.srcdir}" casesensitive="true">
                <include name="**/*admin.sh"/>
                <include name="**/*.html"/>
                <include name="**/*.js"/>
                <include name="**/*.json"/>
                <include name="**/*.vue"/>
                <include name="**/*.css"/>
                <include name="**/*.png"/>
                <include name="**/*.ico"/>
                <include name="**/${shellnode}/node/log0.sh"/>
                <include name="**/.package.json"/>
                <include name="**/.babelrc"/>
                <include name="**/.package-lock.json"/>
                <exclude name="**/node_modules/**/"/>
                <exclude name="**/*collection.json"/>
            </fileset>
        </copy>
        <echo message="Copying .bashrc for node ${shellnode}"></echo>
        <copy todir="${build.workdir}" verbose="on">
            <fileset dir="${build.srcdir}" casesensitive="true">
                <include name="**/${shellnode}/node/.bashrc"/>
                <include name="**/${shellnode}/zerasp/.bashrc"/>
            </fileset>
        </copy>
    </target>

    <!-- ===================================================================================== -->
    <!-- Generic task -->
    <!-- ===================================================================================== -->
    <!-- This task cleans the local build folder -->
    <!-- ===================================================================================== -->
    <target name="cleanup" depends="dir.check" if="dir.exists">
        <echo message="************************ @  Clean the build environment : ${build.workdir}"></echo>
        <delete file="${build.workdir}/*.*" verbose="${delete.verbosemode}" includeemptydirs="true">
            <fileset dir="${build.workdir}" />
        </delete>
    </target>
    
    <target name="dir.check">
        <condition property="dir.exists">
            <available file="${build.workdir}" type="dir"/>
        </condition>
    </target>

    <!-- ===================================================================================== -->
    <!-- This task cleans the server deployment folder -->
    <!-- Cumulative updates don't call it -->
    <!-- ===================================================================================== -->
    <target name="servercleanup" >
        <echo message="************************ @  Cleanup target server directory : ${remotenetdir} on ${remoteserver}"></echo>
        <echo message="************************ @  Using : ${remoteaccount}"></echo>
        <sshexec command="rm -rfv ${remotenetdir}/src ${remotenetdir}/*collection* ${remotenetdir}/package* ${remotenetdir}/*.zip
            " host="${remoteserver}" username="${remoteaccount}" 
            password="${remoteaccountpass}" trust="true" verbose="${delete.verbosemode}"  />
    </target>

    <!-- ===================================================================================== -->
    <!-- This task updates a remote server -->
    <!-- ===================================================================================== -->
    <target name="serverupdate">
        <echo message="************************ @  Transform files in  files in ${localdir} files in to Unix LF mode"></echo>
        <!-- Beware not to transform binary image files -->
        <fixcrlf srcdir="${localdir}" includes="**/*.*" excludes="**/*.png, **/*.jpg" eol="lf" eof="remove"/>

        <echo message="************************ @  Zip all needed files before copy"></echo>
        <zip destfile="${localdir}/${localzip}">
            <fileset dir="${localdir}" casesensitive="true" includes="**/**.*"/>
        </zip>

        <echo message="************************ @  Copy zip file to ${remotenetdir} on ${remoteserver}"></echo>
        <scp todir="${remoteaccount}@${remoteserver}:${remotenetdir}" password="${remoteaccountpass}" trust="true"
             verbose="${copy.verbosemode}" failonerror="no">
            <fileset dir="${localdir}" includes="**/*.zip"/>
        </scp>
        
        <echo message="************************ @  Unzipping script files"></echo>
        <sshexec command="unzip -o ${remotenetdir}/${localzip} -d ${remotenetdir}" host="${remoteserver}" username="${remoteaccount}"
                 password="${remoteaccountpass}"
                 trust="true" verbose="${zip.verbosemode}"/>
    </target>


</project>


